

services:
  # Servicio de mySQL
  auth-database:
    container_name: auth-database
    image: mysql:8.0
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: authentication_db
      MYSQL_USER: auth_user
      MYSQL_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - microservices-network

  # Servicio de la API REST
  auth-service:
    image: api_rest
    container_name: auth-service
    build:
      context: ./retos2-mejorado
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://auth-database:3306/authentication_db
      SPRING_DATASOURCE_USERNAME: auth_user
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      API_KEY_BREVO: ${API_KEY_BREVO}
      JWT_EXPIRATION: 3600000
      SPRING_MAIL_HOST: smtp.gmail.com
      SPRING_MAIL_PORT: 587
      SPRING_MAIL_USERNAME: sebas17rr@gmail.com
      SPRING_MAIL_PASSWORD: ${SPRING_MAIL_PASSWORD}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: rabbitmq
      SPRING_RABBITMQ_PASSWORD: rabbitmq
    depends_on:
      - auth-database
    ports:
      - "80:80"
    networks:
      - microservices-network

  log-service:
    container_name: log-service
    build:
      context: ./Microservice-Logs
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      MONGO_URI: "mongodb://log-database:27017/logServiceDB"
      RABBITMQ_URI: "amqp://rabbitmq:rabbitmq@rabbitmq:5672"
      QUEUE_LOG: "CreateLogQueue"
    depends_on:
      - log-database
      - rabbitmq
    volumes:
      - ./Microservice-Logs:/usr/src/app # Mapeo del proyecto
      - /usr/src/app/node_modules # Asegura que node_modules no se sobrescriba
    command: npm run dev
    networks:
      - microservices-network

  log-database:
    container_name: log-database
    image: mongo:5.0
    ports:
      - "27017:27017"
    volumes:
      - db_log_data:/data/db
    networks:
      - microservices-network

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672"  
      - "15672:15672" 
      - "15675:15675"
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  health_monitor:
    container_name: health-monitor
    build:
      context: ./health-monitor  # Asumiendo que el código del microservicio está en la carpeta ./health-monitor
    ports:
      - "5000:5000"  # Puerto para el microservicio de monitoreo
    environment:
      FLASK_ENV: "development"
      NOTIFICATION_SERVICE_URL: "http://notification-service:5005/api/notifications/send"
      MONGO_URI: "mongodb://database-monitor:27017"
    depends_on:
      - auth-service
      - log-service
    networks:
      - microservices-network
    
  database-monitor:
    container_name: database-monitor
    image: mongo:5.0
    ports:
      - "27018:27017"
    volumes:
      - db_monitor_data:/data/db
    networks:
      - microservices-network
  
  notification-service:
    container_name: notification-service
    build: ./notification-service
    ports:
      - '5005:5005'
    environment:
      MONGO_URI: 'mongodb://database-notification:27017/notificationsDB'
      RABBITMQ_URI: "amqp://rabbitmq:rabbitmq@rabbitmq:5672"
      EMAIL_USER: 'robot.2022.3@gmail.com'
      SENDGRID_API_KEY: ' XXXXXXXXXXXXXXXXXX'
      PORT: 5005
    depends_on:
      - database-notification
      - rabbitmq
    networks:
      - microservices-network
  
  database-notification:
    container_name: database-notification
    image: mongo:5.0
    ports:
      - "27020:27017"
    volumes:
      - db_notification_data:/data/db
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

volumes:
  db_data:
  db_log_data:
    driver: local
  rabbitmq_data:
  db_notification_data:
  db_monitor_data:

