openapi: 3.0.1
info:
  title: User Management API
  version: 1.0.0
  description: RESTful API for managing users, including registration, authentication, password recovery, and CRUD operations.

paths:
  /api/auth/registrarse:
    post:
      summary: Register a new user
      description: Registers a new user in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John
                lastname:
                  type: string
                  example: Doe
                cedula:
                  type: string
                  example: "1113313721"
                email:
                  type: string
                  format: email
                  example: Jhon@yopmail.com
                password:
                  type: string
                  format: password
                  example: securePassword123
                phone:
                  type: string
                  example: "+13116150060"
                birthdate:
                  type: string
                  format: date-time
                  example: "1990-01-01T00:00:00.000Z"
                address:
                  type: string
                  example: "1234 Elm Street, Springfield, IL"
              required:
                - name
                - lastname
                - cedula
                - email
                - password
                - phone
                - birthdate
      responses:
        '201':
          description: User created successfully.
        '400':
          description: Bad Request - Validation errors.
        '409':
          description: Conflict - Email already exists.
        '500':
          description: Internal server error.

  /api/auth/login:
    post:
      summary: User login
      description: Authenticates a user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: Jho@yopmail.com
                passwd:
                  type: string
                  format: password
                  example: securePassword123
              required:
                - email
                - passwd
      responses:
        '200':
          description: Successful authentication, returns JWT token.
        '401':
          description: Unauthorized - Invalid credentials.
        '400':
          description: Bad Request - Missing fields.
        '500':
          description: Internal server error.

  /api/users/detalle/{id}:
    get:
      summary: Get user details
      description: Returns information about a specific user by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details retrieved successfully.
        '404':
          description: User not found.
        '500':
          description: Internal server error.

  /api/users/listar-todos:
    get:
      summary: List all users with pagination
      description: Returns a paginated list of users.
      parameters:
        - name: page
          in: query
          required: false
          description: Page number to retrieve (starts from 0).
          schema:
            type: integer
            example: 0
        - name: size
          in: query
          required: false
          description: Number of users per page.
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: A paginated list of users.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: John
                        lastname:
                          type: string
                          example: Doe
                        cedula:
                          type: string
                          example: 1113313721
                        email:
                          type: string
                          format: email
                          example: john.doe@example.com
                        phone:
                          type: string
                          example: "+1234567890"
                        birthdate:
                          type: string
                          format: date
                          example: 1990-01-01
                        address:
                          type: string
                          example: "1234 Elm Street, Springfield, IL"
        '400':
          description: Bad Request - Invalid pagination parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid pagination parameters."
        '500':
          description: Internal server error.

  /api/users/editar:
    put:
      summary: Update a user
      description: Updates information for a specific user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                name:
                  type: string
                  example: John
                lastname:
                  type: string
                  example: Doe
                cedula:
                  type: string
                  example: "1113313722"
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                phone:
                  type: string
                  example: "+1234567890"
                birthdate:
                  type: string
                  format: date-time
                  example: "1990-01-01T00:00:00.000Z"
                address:
                  type: string
                  example: "1234 Elm Street, Springfield, IL"
              required:
                - id
                - name
                - lastname
                - email
                - cedula
                - phone
                - birthdate
      responses:
        '200':
          description: User updated successfully.
        '404':
          description: User not found.
        '400':
          description: Validation errors.
        '500':
          description: Internal server error.

  /api/users/eliminar/{id}:
    delete:
      summary: Delete a user
      description: Deletes a specific user from the system.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully.
        '404':
          description: User not found.
        '500':
          description: Internal server error.

  /api/auth/recuperar-passwd/{email}:
    post:
      summary: Password recovery
      description: Sends a password recovery link to the user's email.
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
            example: andres.vale@yopmail.com
      responses:
        '200':
          description: Password recovery link sent.
        '404':
          description: User not found.
        '500':
          description: Internal server error.

  /api/auth/cambiar-passwd:
    post:
      summary: Change password
      description: Allows the user to change their password using a recovery token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "MzsyMDI0LTEwLTAxVDA4OjIwOjUyLjkzMTc5Nw=="
                nuevaPasswd:
                  type: string
                  example: la_nueva_contrase√±a
              required:
                - token
                - nuevaPasswd
      responses:
        '200':
          description: Password changed successfully.
        '400':
          description: Invalid token or password format.
        '500':
          description: Internal server error.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
